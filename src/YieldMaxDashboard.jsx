import React, { useEffect, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

// –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ API –∫–ª—é—á—ñ (–º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç–∞—Ö)
// Alpha Vantage: https://www.alphavantage.co/support/#api-key
// Yahoo Finance API (–±–µ–∑ –∫–ª—é—á–∞)
const ALPHA_VANTAGE_API_KEY = "demo"; // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à –∫–ª—é—á
const USE_YAHOO_FINANCE = true; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Yahoo Finance –∑–∞–º—ñ—Å—Ç—å Alpha Vantage

// –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä—ñ–≤ ETF, —è–∫—ñ –Ω–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å
const TICKERS = ["MSTY", "TSLY", "NVDY", "CONY", "ULTY", "YMAX"];

export default function YieldMaxDashboard() {
  const [etfData, setEtfData] = useState([]); // –°—Ç–µ–π—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ ETF
  const [error, setError] = useState(null); // –°—Ç–µ–π—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
  const [loading, setLoading] = useState(true); // –°—Ç–µ–π—Ç –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const [dataSource, setDataSource] = useState(""); // –î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
  const formatDate = (timestamp) => {
    if (typeof timestamp !== "number") return "‚Äî";

    const date = new Date(timestamp * 1000);
    return date.toLocaleString("uk-UA", {
      day: "2-digit",
      month: "2-digit",
      year: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Yahoo Finance API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ
  const fetchFromYahooFinance = async () => {
    try {
      const promises = TICKERS.map(async (ticker) => {
        try {
          // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω–∏–π –ø—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä —Ç–∞ —ñ–Ω—à—ñ –ø—Ä–æ–∫—Å—ñ –¥–ª—è –æ–±—Ö–æ–¥—É CORS
          const proxyUrls = [
            `http://localhost:3003/api/yahoo-finance/${ticker}`,
            `https://api.allorigins.win/raw?url=${encodeURIComponent(
              `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1d`
            )}`,
            `https://cors-anywhere.herokuapp.com/https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1d`,
            `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1d`,
          ];

          let data = null;
          let lastError = null;

          for (const url of proxyUrls) {
            try {
              const res = await fetch(url, {
                headers: {
                  Accept: "application/json",
                  "User-Agent":
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
                },
              });

              if (res.ok) {
                data = await res.json();
                break;
              }
            } catch (error) {
              lastError = error;
              continue;
            }
          }

          if (!data) {
            throw lastError || new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ");
          }

          if (data.chart && data.chart.result && data.chart.result[0]) {
            const result = data.chart.result[0];
            const meta = result.meta;
            const quote = result.indicators.quote[0];

            const currentPrice = meta.regularMarketPrice;
            const previousClose = meta.previousClose;
            const changePercent =
              ((currentPrice - previousClose) / previousClose) * 100;

            return {
              symbol: ticker,
              price: currentPrice,
              changesPercentage: changePercent,
              timestamp: meta.regularMarketTime,
              previousClose: previousClose,
              volume: quote.volume ? quote.volume[quote.volume.length - 1] : 0,
            };
          }
          return null;
        } catch (error) {
          console.error(`–ü–æ–º–∏–ª–∫–∞ –¥–ª—è ${ticker}:`, error);
          return null;
        }
      });

      const results = await Promise.all(promises);
      const validResults = results.filter((result) => result !== null);

      if (validResults.length > 0) {
        setEtfData(validResults);
        setDataSource("Yahoo Finance API");
        setError(null);
      } else {
        throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Yahoo Finance");
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Yahoo Finance:", error);
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Alpha Vantage API (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏)
  const fetchFromAlphaVantage = async () => {
    try {
      const promises = TICKERS.map(async (ticker) => {
        try {
          const url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${ticker}&apikey=${ALPHA_VANTAGE_API_KEY}`;
          const res = await fetch(url);

          if (!res.ok) {
            throw new Error(`HTTP error! status: ${res.status}`);
          }

          const data = await res.json();

          if (data["Global Quote"]) {
            const quote = data["Global Quote"];
            return {
              symbol: quote["01. symbol"],
              price: parseFloat(quote["05. price"]),
              changesPercentage: parseFloat(
                quote["10. change percent"].replace("%", "")
              ),
              timestamp: Math.floor(Date.now() / 1000),
              previousClose: parseFloat(quote["08. previous close"]),
              volume: parseInt(quote["06. volume"]),
            };
          }
          return null;
        } catch (error) {
          console.error(`–ü–æ–º–∏–ª–∫–∞ –¥–ª—è ${ticker}:`, error);
          return null;
        }
      });

      const results = await Promise.all(promises);
      const validResults = results.filter((result) => result !== null);

      if (validResults.length > 0) {
        setEtfData(validResults);
        setDataSource("Alpha Vantage API");
        setError(null);
      } else {
        throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Alpha Vantage");
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Alpha Vantage:", error);
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API
  const fetchETFData = async () => {
    try {
      setLoading(true);
      setError(null);

      if (USE_YAHOO_FINANCE) {
        try {
          await fetchFromYahooFinance();
        } catch (error) {
          console.log("Yahoo Finance –Ω–µ –ø—Ä–∞—Ü—é—î, —Å–ø—Ä–æ–±—É—î–º–æ Alpha Vantage...");
          try {
            await fetchFromAlphaVantage();
          } catch (alphaError) {
            console.log("Alpha Vantage –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É...");
            setError(
              "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –∂–æ–¥–Ω–æ–≥–æ API. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            );
            setDataSource("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è");
          }
        }
      } else {
        try {
          await fetchFromAlphaVantage();
        } catch (error) {
          console.log("Alpha Vantage –Ω–µ –ø—Ä–∞—Ü—é—î, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É...");
          setError(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Alpha Vantage API. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ API –∫–ª—é—á –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
          );
          setDataSource("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è");
        }
      }
    } catch (error) {
      console.error("–í—Å—ñ API –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å:", error);
      setError(
        "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É."
      );
      setDataSource("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è");
    } finally {
      setLoading(false);
    }
  };

  // –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
  useEffect(() => {
    fetchETFData();
    const interval = setInterval(fetchETFData, 1000 * 60 * 5); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">
        üìä YieldMax ETF Live Dashboard
      </h1>

      <div className="mb-4 text-sm text-gray-600">
        –î–∞–Ω—ñ –∑: {dataSource || "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."}
      </div>

      {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –≤–æ–Ω–∞ —î */}
      {error && (
        <div className="text-red-600 font-semibold mb-4 p-3 bg-red-50 border border-red-200 rounded">
          ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {error}
        </div>
      )}

      <Card>
        <CardContent className="p-6">
          {loading ? (
            <div className="flex items-center justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span className="ml-3 text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...</span>
            </div>
          ) : etfData.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <p>üìä –î–∞–Ω—ñ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö ETF –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>
              <p className="text-sm mt-2">
                API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –¥–∞–Ω—ñ –¥–ª—è –æ–±—Ä–∞–Ω–∏—Ö —Ç–∏–∫–µ—Ä—ñ–≤
              </p>
              <div className="mt-4 text-xs text-gray-400">
                <p>üí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:</p>
                <p>‚Ä¢ –¢–∏–∫–µ—Ä–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –≤ –æ–±—Ä–∞–Ω–æ–º—É API</p>
                <p>‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ API</p>
                <p>‚Ä¢ –õ—ñ–º—ñ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω—É</p>
                <p>‚Ä¢ –†–∏–Ω–æ–∫ –∑–∞–∫—Ä–∏—Ç–∏–π –∞–±–æ –¥–∞–Ω—ñ —â–µ –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω—ñ</p>
              </div>
            </div>
          ) : (
            <>
              <div className="mb-4 text-sm text-gray-600">
                –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {new Date().toLocaleString("uk-UA")}
              </div>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>–¢–∏–∫–µ—Ä</TableHead>
                    <TableHead>–¶—ñ–Ω–∞</TableHead>
                    <TableHead>–ó–º—ñ–Ω–∞ (%)</TableHead>
                    <TableHead>–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞</TableHead>
                    <TableHead>–û–±'—î–º</TableHead>
                    <TableHead>–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {etfData.map((etf) => (
                    <TableRow key={etf.symbol}>
                      <TableCell className="font-medium">
                        {etf.symbol}
                      </TableCell>
                      <TableCell>
                        {typeof etf.price === "number"
                          ? `$${etf.price.toFixed(2)}`
                          : "‚Äî"}
                      </TableCell>
                      <TableCell
                        className={
                          typeof etf.changesPercentage === "number" &&
                          etf.changesPercentage < 0
                            ? "text-red-600 font-medium"
                            : "text-green-600 font-medium"
                        }
                      >
                        {typeof etf.changesPercentage === "number"
                          ? `${
                              etf.changesPercentage > 0 ? "+" : ""
                            }${etf.changesPercentage.toFixed(2)}%`
                          : "‚Äî"}
                      </TableCell>
                      <TableCell>
                        {typeof etf.previousClose === "number"
                          ? `$${etf.previousClose.toFixed(2)}`
                          : "‚Äî"}
                      </TableCell>
                      <TableCell>
                        {etf.volume ? etf.volume.toLocaleString() : "‚Äî"}
                      </TableCell>
                      <TableCell className="text-sm text-gray-600">
                        {formatDate(etf.timestamp)}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
